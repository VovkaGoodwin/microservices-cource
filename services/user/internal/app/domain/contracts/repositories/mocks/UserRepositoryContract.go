// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/VovkaGoodwin/microservices-cource/services/user/internal/app/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryContract is an autogenerated mock type for the UserRepositoryContract type
type UserRepositoryContract struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UserRepositoryContract) GetById(ctx context.Context, id models.UserID) (models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) (models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID) models.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepositoryContract creates a new instance of UserRepositoryContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryContract {
	mock := &UserRepositoryContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
