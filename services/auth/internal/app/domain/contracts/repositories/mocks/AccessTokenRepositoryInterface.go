// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/VovkaGoodwin/microservices-cource/services/auth/internal/app/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// AccessTokenRepositoryInterface is an autogenerated mock type for the AccessTokenRepositoryInterface type
type AccessTokenRepositoryInterface struct {
	mock.Mock
}

// IsTokenRevoked provides a mock function with given fields: ctx, tokenId
func (_m *AccessTokenRepositoryInterface) IsTokenRevoked(ctx context.Context, tokenId models.TokenId) (bool, error) {
	ret := _m.Called(ctx, tokenId)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TokenId) (bool, error)); ok {
		return rf(ctx, tokenId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TokenId) bool); ok {
		r0 = rf(ctx, tokenId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TokenId) error); ok {
		r1 = rf(ctx, tokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveToken provides a mock function with given fields: ctx, tokenId, token
func (_m *AccessTokenRepositoryInterface) SaveToken(ctx context.Context, tokenId models.TokenId, token string) error {
	ret := _m.Called(ctx, tokenId, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TokenId, string) error); ok {
		r0 = rf(ctx, tokenId, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccessTokenRepositoryInterface creates a new instance of AccessTokenRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessTokenRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessTokenRepositoryInterface {
	mock := &AccessTokenRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
