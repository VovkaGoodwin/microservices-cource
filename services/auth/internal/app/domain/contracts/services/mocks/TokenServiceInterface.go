// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "github.com/VovkaGoodwin/microservices-cource/services/auth/internal/app/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// TokenServiceInterface is an autogenerated mock type for the TokenServiceInterface type
type TokenServiceInterface struct {
	mock.Mock
}

// GenerateNewAccessToken provides a mock function with given fields: userId
func (_m *TokenServiceInterface) GenerateNewAccessToken(userId models.UserId) (*models.AccessToken, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewAccessToken")
	}

	var r0 *models.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserId) (*models.AccessToken, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(models.UserId) *models.AccessToken); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(models.UserId) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: tokenString
func (_m *TokenServiceInterface) ParseToken(tokenString string) (*models.AccessToken, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *models.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccessToken, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccessToken); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: token
func (_m *TokenServiceInterface) Sign(token *models.AccessToken) (string, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.AccessToken) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*models.AccessToken) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.AccessToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenServiceInterface creates a new instance of TokenServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenServiceInterface {
	mock := &TokenServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
